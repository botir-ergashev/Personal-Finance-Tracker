// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Personal_Finance_Tracker___Enterprise_Edition.Models;

#nullable disable

namespace Personal_Finance_Tracker___Enterprise_Edition.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Personal_Finance_Tracker___Enterprise_Edition.Models.AuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("Personal_Finance_Tracker___Enterprise_Edition.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Color = "#ff00ff",
                            IsDeleted = false,
                            Name = "Transport",
                            UserId = "51cd0541-b627-40ec-890e-5cbf8b5847cc"
                        },
                        new
                        {
                            Id = 2,
                            Color = "#00ff00",
                            IsDeleted = false,
                            Name = "Ovqatlanish",
                            UserId = "51cd0541-b627-40ec-890e-5cbf8b5847cc"
                        },
                        new
                        {
                            Id = 3,
                            Color = "#00ff00",
                            IsDeleted = false,
                            Name = "Ovqatlanish",
                            UserId = "093a4a05-e238-41e6-a3ab-de51027e7d17"
                        });
                });

            modelBuilder.Entity("Personal_Finance_Tracker___Enterprise_Edition.Models.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<short>("Type")
                        .HasColumnType("smallint");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Transactions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 1000m,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2025, 7, 1, 12, 5, 56, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Type = (short)0,
                            UserId = "51cd0541-b627-40ec-890e-5cbf8b5847cc"
                        },
                        new
                        {
                            Id = 2,
                            Amount = 1001m,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2025, 7, 1, 12, 5, 56, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Note = "Test note",
                            Type = (short)0,
                            UserId = "51cd0541-b627-40ec-890e-5cbf8b5847cc"
                        },
                        new
                        {
                            Id = 3,
                            Amount = 1002m,
                            CategoryId = 0,
                            CreatedAt = new DateTime(2025, 7, 1, 12, 5, 56, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Type = (short)0,
                            UserId = "1caccb3c-29c2-455f-bd43-16c8a4bd9190"
                        },
                        new
                        {
                            Id = 4,
                            Amount = 1003m,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2025, 7, 1, 12, 5, 56, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Type = (short)0,
                            UserId = "093a4a05-e238-41e6-a3ab-de51027e7d17"
                        });
                });

            modelBuilder.Entity("Personal_Finance_Tracker___Enterprise_Edition.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = "51cd0541-b627-40ec-890e-5cbf8b5847cc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b8fd481c-7b46-4d67-a650-c5363541dabb",
                            Email = "test.test@test.te",
                            EmailConfirmed = false,
                            IsActive = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "TEST1",
                            PasswordHash = "fake",
                            PhoneNumberConfirmed = false,
                            Role = "Customer",
                            SecurityStamp = "595a1c7c-f843-44fa-984a-55b54f44ee56",
                            TwoFactorEnabled = false,
                            UserName = "Test1"
                        },
                        new
                        {
                            Id = "1caccb3c-29c2-455f-bd43-16c8a4bd9190",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "046e8bc8-d783-43e2-95e1-915c7abf27c1",
                            Email = "test.test@test.te",
                            EmailConfirmed = false,
                            IsActive = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "TEST2",
                            PasswordHash = "fake",
                            PhoneNumberConfirmed = false,
                            Role = "Customer",
                            SecurityStamp = "c50c9449-11ba-4a86-a471-31ee60651ddd",
                            TwoFactorEnabled = false,
                            UserName = "Test2"
                        },
                        new
                        {
                            Id = "093a4a05-e238-41e6-a3ab-de51027e7d17",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5d1857e2-2bc7-4ab6-aecf-eb0ac55c9fec",
                            Email = "test.test@test.te",
                            EmailConfirmed = false,
                            IsActive = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "TEST3",
                            PasswordHash = "fake",
                            PhoneNumberConfirmed = false,
                            Role = "Admin",
                            SecurityStamp = "4024ccae-475c-45f0-8558-002fd8b101b9",
                            TwoFactorEnabled = false,
                            UserName = "Test3"
                        });
                });

            modelBuilder.Entity("Personal_Finance_Tracker___Enterprise_Edition.Models.AuditLog", b =>
                {
                    b.HasOne("Personal_Finance_Tracker___Enterprise_Edition.Models.User", "User")
                        .WithMany("AuditLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Personal_Finance_Tracker___Enterprise_Edition.Models.Category", b =>
                {
                    b.HasOne("Personal_Finance_Tracker___Enterprise_Edition.Models.User", "User")
                        .WithMany("Categories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Personal_Finance_Tracker___Enterprise_Edition.Models.Transaction", b =>
                {
                    b.HasOne("Personal_Finance_Tracker___Enterprise_Edition.Models.User", "User")
                        .WithMany("Transactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Personal_Finance_Tracker___Enterprise_Edition.Models.User", b =>
                {
                    b.Navigation("AuditLogs");

                    b.Navigation("Categories");

                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
